
contract mysecondcont {
    import Runtime;
    import Stake;
    public doSomething() : number
    {
        Stake.stake(@S3dP2jjf1jUG9nethZBWbnu9a6dFqB7KveTWU7znis6jpDy, 1000000000);
        return 0;
    }
}

token TEST {

    global owner : address;
    
    constructor(_owner: address){
        owner = _owner;
    }
    
    import Runtime;
    import Stake;
    public doSomething() : number
    {
        Stake.stake(@S3dP2jjf1jUG9nethZBWbnu9a6dFqB7KveTWU7znis6jpDy, 1000000000);
        return 0;
    }
    
    public getName() : string {
        return "test";
    }
}



contract mintcontract {
	import Runtime;
	import Time;
	import NFT;
	import Call;
	import Address;
	import Token;
	import Stake;
	import Module;
	import Number;
	import ABI;
	
	global id: number;
	global owner: address;
	global contractName : string;
	
	constructor(contractOwner:address)	{
		owner = contractOwner;
		id = 0;
		contractName = "aaaa";
	}
	
	public mintMyContract(from:address):number {
	    Runtime.expect(Runtime.isWitness(owner), "witness failed");
	    id += 1;
	    Runtime.deployContract($THIS_ADDRESS, mysecondcont);
	    return id;
	}
	
	public mintMyToken(from: address, tokenName: string) {
	    local maxSupply:number = 100;
        local decimals:number = 1;
        local flags:TokenFlags = TokenFlags.None;
        tokenName = "TEST";
        local abi = Module.getABI(TEST);
        local methodName = "getName";
        local nameABI = ABI.getMethod(TEST, "getName");
        //Token.create($THIS_ADDRESS, Module.getScript(TEST),  Module.getABI(TEST));
	}
}